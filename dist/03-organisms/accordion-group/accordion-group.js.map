{"version":3,"sources":["03-organisms/accordion-group/accordion-group.js"],"names":["Drupal","behaviors","accordion","attach","Array","prototype","slice","call","document","querySelectorAll","forEach","hasAttribute","addEventListener","target","classList","contains","getAttribute","querySelector","setAttribute","getElementById","removeAttribute","preventDefault","which","toString","ctrlKey","match","focus","indexOf","length"],"mappings":"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","file":"accordion-group.js","sourcesContent":["Drupal.behaviors.accordion = {\n  attach: function (context, settings) {\n\n  'use strict';\n  \n  Array.prototype.slice.call(document.querySelectorAll('.Accordion')).forEach(function (accordion) {\n  \n    // Allow for multiple accordion sections to be expanded at the same time\n    var allowMultiple = accordion.hasAttribute('data-allow-multiple');\n    // Allow for each toggle to both open and close individually\n    var allowToggle = (allowMultiple) ? allowMultiple : accordion.hasAttribute('data-allow-toggle');\n  \n    // Create the array of toggle elements for the accordion group\n    var triggers = Array.prototype.slice.call(accordion.querySelectorAll('.Accordion-trigger'));\n    var panels = Array.prototype.slice.call(accordion.querySelectorAll('.Accordion-panel'));\n  \n    accordion.addEventListener('click', function (event) {\n      var target = event.target;\n  \n      if (target.classList.contains('Accordion-trigger')) {\n        // Check if the current toggle is expanded.\n        var isExpanded = target.getAttribute('aria-expanded') == 'true';\n        var active = accordion.querySelector('[aria-expanded=\"true\"]');\n  \n        // without allowMultiple, close the open accordion\n        if (!allowMultiple && active && active !== target) {\n          // Set the expanded state on the triggering element\n          active.setAttribute('aria-expanded', 'false');\n          // Hide the accordion sections, using aria-controls to specify the desired section\n          document.getElementById(active.getAttribute('aria-controls')).setAttribute('hidden', '');\n  \n          // When toggling is not allowed, clean up disabled state\n          if (!allowToggle) {\n            active.removeAttribute('aria-disabled');\n          }\n        }\n  \n        if (!isExpanded) {\n          // Set the expanded state on the triggering element\n          target.setAttribute('aria-expanded', 'true');\n          // Hide the accordion sections, using aria-controls to specify the desired section\n          document.getElementById(target.getAttribute('aria-controls')).removeAttribute('hidden');\n  \n          // If toggling is not allowed, set disabled state on trigger\n          if (!allowToggle) {\n            target.setAttribute('aria-disabled', 'true');\n          }\n        }\n        else if (allowToggle && isExpanded) {\n          // Set the expanded state on the triggering element\n          target.setAttribute('aria-expanded', 'false');\n          // Hide the accordion sections, using aria-controls to specify the desired section\n          document.getElementById(target.getAttribute('aria-controls')).setAttribute('hidden', '');\n        }\n  \n        event.preventDefault();\n      }\n    });\n  \n    // Bind keyboard behaviors on the main accordion container\n    accordion.addEventListener('keydown', function (event) {\n      var target = event.target;\n      var key = event.which.toString();\n      // 33 = Page Up, 34 = Page Down\n      var ctrlModifier = (event.ctrlKey && key.match(/33|34/));\n  \n      // Is this coming from an accordion header?\n      if (target.classList.contains('Accordion-trigger')) {\n        // Up/ Down arrow and Control + Page Up/ Page Down keyboard operations\n        // 38 = Up, 40 = Down\n        if (key.match(/38|40/) || ctrlModifier) {\n          var index = triggers.indexOf(target);\n          var direction = (key.match(/34|40/)) ? 1 : -1;\n          var length = triggers.length;\n          var newIndex = (index + length + direction) % length;\n  \n          triggers[newIndex].focus();\n  \n          event.preventDefault();\n        }\n        else if (key.match(/35|36/)) {\n          // 35 = End, 36 = Home keyboard operations\n          switch (key) {\n            // Go to first accordion\n            case '36':\n              triggers[0].focus();\n              break;\n              // Go to last accordion\n            case '35':\n              triggers[triggers.length - 1].focus();\n              break;\n          }\n  \n          event.preventDefault();\n        }\n      }\n      else if (ctrlModifier) {\n        // Control + Page Up/ Page Down keyboard operations\n        // Catches events that happen inside of panels\n        panels.forEach(function (panel, index) {\n          if (panel.contains(target)) {\n            triggers[index].focus();\n  \n            event.preventDefault();\n          }\n        });\n      }\n    });\n  \n    // Minor setup: will set disabled state, via aria-disabled, to an\n    // expanded/ active accordion which is not allowed to be toggled close\n    if (!allowToggle) {\n      // Get the first expanded/ active accordion\n      var expanded = accordion.querySelector('[aria-expanded=\"true\"]');\n  \n      // If an expanded/ active accordion is found, disable\n      if (expanded) {\n        expanded.setAttribute('aria-disabled', 'true');\n      }\n    }\n  \n  });\n  \n  }\n};\n\n"]}