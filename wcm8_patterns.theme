<?php

/**
 * @file
 * Functions to support theming in the Pattern Lab theme.
 */

 /**
  * Adds additional theme settings.
  */
 function wcm8_patterns_form_system_theme_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id = NULL) {
   // Work-around for a core bug affecting admin themes. See issue #943212.
   if (isset($form_id)) {
     return;
   }

   $form['theme_customization'] = array (
     '#type'     => 'fieldset',
     '#title'    => t('Theme Customization'),
     '#markup'   => t('Customize the look and feel of the site.')
   );

   $form['theme_customization']['header'] = array(
     '#type'          => 'fieldset',
     '#title'         => t('Header')
   );

   $header_variant_options = [
     'standard' => t('Standard')
   ];

   $form['theme_customization']['header']['header_variant'] = array(
     '#type'          => 'radios',
     '#title'         => t('Header Variant'),
     '#default_value' => theme_get_setting('header_variant'),
     '#options'       => $header_variant_options
   );

   $navbar_color_options = [
     'light' => t('Light'),
     'dark'  => t('Dark')
   ];

   $form['theme_customization']['header']['osu_navbar_color'] = array(
     '#type'          => 'radios',
     '#title'         => t('OSU Navbar Color'),
     '#default_value' => theme_get_setting('osu_navbar_color'),
     '#options'       => $navbar_color_options
   );

   $masthead_color_options = [
     'dk-gray' => t('Dark Gray'),
     'md-gray' => t('Medium Gray'),
     'lt-gray' => t('Light Gray'),
     'white'   => t('White')
   ];

   $form['theme_customization']['header']['masthead_color'] = array(
     '#type'          => 'radios',
     '#title'         => t('Masthead Color'),
     '#default_value' => theme_get_setting('masthead_color'),
     '#options'       => $masthead_color_options
   );

   $form['theme_customization']['footer'] = array(
     '#type'          => 'fieldset',
     '#title'         => t('Footer')
   );

   $footer_color_options = [
     'dk-gray' => t('Dark Gray'),
     'md-gray' => t('Medium Gray'),
     'lt-gray' => t('Light Gray'),
     'white'   => t('White')
   ];

   $form['theme_customization']['footer']['footer_color'] = array(
     '#type'          => 'radios',
     '#title'         => t('Footer Color'),
     '#default_value' => theme_get_setting('footer_color'),
     '#options'       => $footer_color_options
   );

 }

 /**
  * Clear caches when settings change.
  */
 function wcm8_patterns_settings_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
   drupal_flush_all_caches();
 }

 /**
  * Implements hook_preprocess().
  */
 function wcm8_patterns_preprocess(array &$variables, $hook) {
   //all-purpose variables
   $variables['base_path'] = base_path();

   //theme setting variables
   $variables['header_variant'] = theme_get_setting('header_variant');
   $variables['osu_navbar_color'] = theme_get_setting('osu_navbar_color');
   $variables['masthead_color'] = theme_get_setting('masthead_color');
   $variables['footer_color'] = theme_get_setting('footer_color');

   // Load the site name out of configuration.
   $config = \Drupal::config('system.site');
   $variables['site_name'] = $config->get('name');

   // Load variables from Site Information module.
   $siteinfo_config = \Drupal::config('wcm8_siteinfo.settings');
   $siteinfo_vars = [
     'prefix',
     'admin_link',
     'footer_text',
     'address_1',
     'address_2',
     'city',
     'state',
     'zip',
     'phone',
     'fax',
     'contact_email',
     'twitter',
     'facebook',
     'linkedin',
     'googleplus',
     'youtube',
     'instagram',
     'photos'
   ];
   foreach ($siteinfo_vars as $siteinfo_var) {
     $variables[$siteinfo_var] = $siteinfo_config->get($siteinfo_var);
   }
 }

 /**
  * Implements hook_preprocess_html().
  */
 function wcm8_patterns_preprocess_html(array &$variables) {
   // add node id and type to body classes
   if ($node = \Drupal::request()->attributes->get('node')) {
     $variables['attributes']['class'][] = 'page-node';
     $variables['attributes']['class'][] = 'page-node-' . $node->id();
     $variables['attributes']['class'][] = 'node-type-' . $node->bundle();
   }
 }

 /**
  * Implements hook_preprocess_paragraph().
  */
 function wcm8_patterns_preprocess_paragraph(array &$variables, $hook) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $paragraphType = $paragraph->bundle();
  $paragraphId = $paragraph->id();

  //provide vars to be used as necessary
  $variables['paragraph_type'] = $paragraphType;
  $variables['paragraph_id'] = $paragraphId;

  //get value of header level from accordion-group and use it in accordion-item
  if ($paragraphType == 'accordion_item') {
    $parent = $paragraph->getParentEntity();
    $variables['parent_paragraph_id'] = $parent->id();
    $variables['accordion_heading_level'] = $parent->get('field_heading_level')->value;
  }

  //provide vars for text_with_image paragraph type
  if ($paragraphType == 'text_with_image') {
    $variables['image_position'] = $paragraph->get('field_image_position')->value;
    $variables['image_size'] = $paragraph->get('field_image_size')->value;
  }

  //provide vars for callout paragraphs
  if ($paragraphType == 'callout') {
    $calloutType = $paragraph->get('field_callout_type')->value;
    $variables['callout_type'] = str_replace("_", "-", $calloutType);
    if ($calloutType == 'caution') {
      $variables['callout_icon'] = 'fa-exclamation';
    } else if ($calloutType == 'ux_tip') {
      $variables['callout_icon'] = 'fa-asterisk';
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
 function wcm8_patterns_preprocess_field(array &$variables, $hook) {
   if ($node = \Drupal::request()->attributes->get('node')) {
     $variables['nid'] = $node->id();
   }
 }
